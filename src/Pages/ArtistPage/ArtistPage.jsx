import React from 'react';
import PropTypes from 'prop-types';
import axios from 'axios';
import _ from 'lodash';
import ContentSegment from '../../Components/ContentSegment/ContentSegment';
import PageFooter from '../../Components/PageFooter/PageFooter';
import PageHeader from '../../Components/PageHeader/PageHeader';
import ArtistCard from '../../Components/ArtistCard/ArtistCard';
import RelatedArtists from '../../Components/RelatedArtists/RelatedArtists';
import {
  saveGeneralAuth,
  loadGeneralAuth,
} from '../../utils';
import ArtistSearchBar from '../../Components/SearchBar/ArtistSearchBar';
import ErrorPopup from '../../Components/ErrorPopup/ErrorPopup';
import { artistEndpoint } from '../../endpoints';

const getInitState = () => (
  {
    artist: {},
    loading: true,
    errors: [],
  }
);

class ArtistPage extends React.Component {
  constructor(props) {
    super(props);
    this.handleArtistRequest = this.handleArtistRequest.bind(this);
    this.handleErrors = this.handleErrors.bind(this);

    this.state = getInitState();
  }

  componentDidMount() {
    this.handleArtistRequest(this.props.match.params.artistname);
  }

  componentWillReceiveProps(newProps) {
    // Re-query for an artist when a new match is given via BrowserRouter
    if (this.props.match.params.artistname !== newProps.match.params.artistname) {
      this.setState(getInitState(), this.handleArtistRequest(newProps.match.params.artistname));
    }
  }

  /**
   * Add the provided error and header information to the state
   *
   * @param {Object} error axios response error object
   * @param {String} header human-parsable error description
   */
  handleErrors(error, header = 'An error occurred...') {
    this.setState({
      errors: [
        ...this.state.errors,
        { error, header },
      ],
    });
  }

  /**
   * Make a query to Spotlight API and retrieve related artist data
   * If any request errors occur, log them in state
   *
   * @param {String} artistID artist id from spotify artist response
   */
  handleArtistRequest(artistID) {
    axios.post(
      artistEndpoint,
      {
        data: {
          artistID,
          generalAuth: loadGeneralAuth(),
        },
      },
    ).then((response) => {
      saveGeneralAuth(response.data.data.generalAuth);
      this.setState({
        loading: false,
        artist: response.data.data.artist,
      });
    }).catch((error) => {
      this.setState({
        ...getInitState(),
        loading: false,
      });
      this.handleErrors(error, 'An error occured getting that artist...');
    });
  }

  render() {
    const { match, history } = this.props;
    const artistID = _.get(this.state.artist, 'id', '');

    return (
      <React.Fragment>
        <PageHeader />
        <ContentSegment>
          {
            // Create an ErrorPopup for all errors in state
            // These can be generated by this component or any children passed
            // this.handleErrors()
            this.state.errors.map((error, i) => (
              <ErrorPopup
                key={error.header}
                header={error.header}
                error={error.error.toString()}
                index={i}
              />
            ))
          }
          <ArtistSearchBar
            disabled={this.state.loading}
            history={history}
            onError={this.handleErrors}
          />
          <ArtistCard
            loading={this.state.loading}
            artist={this.state.artist}
            search={match.params.artistname}
          />
          <RelatedArtists onError={this.handleErrors} primaryArtistID={artistID} />
        </ContentSegment>
        <PageFooter />
      </React.Fragment>
    );
  }
}

ArtistPage.propTypes = {
  history: PropTypes.shape({
    push: PropTypes.func.isRequired,
  }).isRequired,
  match: PropTypes.shape({
    params: PropTypes.shape({
      artistname: PropTypes.string,
    }).isRequired,
  }).isRequired,
};

export default ArtistPage;
